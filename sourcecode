# fraud_detection.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the dataset
data = pd.read_csv("creditcard.csv")

# Basic preprocessing
data["NormalizedAmount"] = (data["Amount"] - data["Amount"].mean()) / data["Amount"].std()
data = data.drop(["Time", "Amount"], axis=1)

# Balance dataset using undersampling
fraud = data[data.Class == 1]
nonfraud = data[data.Class == 0].sample(n=len(fraud), random_state=42)

balanced_data = pd.concat([fraud, nonfraud])
X = balanced_data.drop("Class", axis=1)
y = balanced_data["Class"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)

print("\n=== Classification Report ===")
print(classification_report(y_test, y_pred))
print("\n=== Confusion Matrix ===")
print(confusion_matrix(y_test, y_pred))
print("\n=== Accuracy Score ===")
print(accuracy_score(y_test, y_pred))

# Example: Fraud prevention simulation
def prevent_fraud(transaction):
    transaction = np.array(transaction).reshape(1, -1)
    prediction = model.predict(transaction)
    if prediction[0] == 1:
        return "ðŸš¨ FRAUD DETECTED: Transaction Blocked"
    else:
        return "âœ… Transaction Approved"

# Simulate with a test example
example_transaction = X_test.iloc[0].tolist()
print("\n=== Simulated Transaction ===")
print(prevent_fraud(example_transaction))
